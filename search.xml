<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[git使用过程中一些小问题整理（持续更新）]]></title>
      <url>%2F2017%2F03%2F24%2Fgit%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89%2F</url>
      <content type="text"><![CDATA[本地sourceTree上仍然能够看到远程已经删除的分支原因我们第一次拉取用git管理的代码（或文件）到本地时，拉取的是整个工程代码，里面包含有很多分支，我们一般开发、测试、发布都有自己分支，加上各个模块都有自己的测试、发布分支（一般都有多个，某一版本哪一天的测试分支，发布分支，几十个分支是很常见的情况），分支很多，我们会定时在服务器上清理比较久远，对我们来说已经用不到的分支，假如我删除了user_test_20170109的分支，并把变更推送到服务器，对你自己的电脑来说，该分支你再也检测（git专有名称是跟踪）不到了，但是其他小伙伴的电脑上依然能够检测到该分支，刷新也没用，这是由于git本地仍然保存着第一次clone下来的分支信息，即使远程已经删除 解决方法登陆git服务器，把stale（不新鲜的，过期的）状态的分支信息移除掉（.git文件里面记录的信息） 步骤1、打开sourceTree，点击右上角的“命令行模式”，然后执行命令 git remote show origin ，输入用户名和密码 lenovo@LIN1220 /d/Exploit/test (qc_app_dev_user) $git remote show origin Username for &apos;http://192.168.30.6&apos;: dongsheng.lin Password for &apos;http://dongsheng.lin@192.168.30.6&apos;: * remote origin Fetch URL: http://192.168.30.6/zijun.song/qc_app.git Push URL: http://192.168.30.6/zijun.song/qc_app.git HEAD branch: master Remote branches: master tracked ********************************************************* ********************************************************* ********************************************************* refs/remotes/origin/qc_app_order_release stale (use &apos;git remote prune&apos; to remove) refs/remotes/origin/qc_app_user_release_1206 stale (use &apos;git remote prune&apos; to remove) refs/remotes/origin/qc_app_user_release_20161120 stale (use &apos;git remote prune&apos; to remove) 分支后面跟着状态：tracked：被跟踪的，git服务器和本地都存在的分支stale：被跟踪，git服务器已经删除的分支2、我们执行命令 git remote prune origin，将stale状态的分支删除掉 lenovo@LIN1220 /d/Exploit/test (qc_app_dev_user) $ git remote prune origin Username for &apos;http://192.168.30.6&apos;: dongsheng.lin Password for &apos;http://dongsheng.lin@192.168.30.6&apos;: Pruning origin URL: http://192.168.30.6/***/qc_app.git * [pruned] origin/qc_app_order_release * [pruned] origin/qc_app_user_release_1206 * [pruned] origin/qc_app_user_release_20161120 我们可以执行步骤1中的命令查看git分支状态，可以查到stale状态的分支已经被删除掉当然，如果你使用的是IDEA，那么可以直接将窗口切换到 Terminal ，执行上面的命令 git拉取代码报错我在stackoverflow上找到了解决方案，如下： git -c diff.mnemonicprefix=false -c core.quotepath=false fetch origin git -c diff.mnemonicprefix=false -c core.quotepath=false pull origin qc_app_v1.0_dev 0[main] us 0 init_cheap:VirtualAlloc pointer is null,Win32 error 487 AllocationBase 0x0,BaseAddress 0xFE0000,RegionSize 0xB0000,State 0x10000 D:\Software\devalop\git\Git\bin\sh.exe:*** Couldn&apos;t reserve space for cygwin&apos;s heap,Win32 erroe 0 解决办法进入git的安装目录，比如我的是 D:\Software\devalop\git\Git\bin，用管理员身份启动命令行，执行如下命令 D:\Software\devalop\git\Git\bin&gt;tasklist /m msys-1.0.dll D:\Software\devalop\git\Git\bin&gt;rebase.exe -b 0x50000000 msys-1.0.dll 如果rebase命令执行报错，类似下面的提示： RebaseImage(msys-1.0.dll) failed with last error = 6 那么您需要按顺序执行下面动作1、把dll文件复制到另一个目录下2、继续用上面的rebase命令3、用复制出来的dll文件替换原来的以上所有命令都必须用管理员身份执行 git文件大小写惹得祸我们有时候会一不小心把文件（文件夹）的命名命错了，该大写的字母写成小写，该小写的写成大写的，发现之后把它改回来，提交到git，没毛病，但是其他同事的机器却会出现莫名其妙的问题，比如 git服务器上有两份文件，一份大写，一份小写也许你会奇怪，在IDEA上明明看到就是一份文件，为什么git服务器上会有两份原因：IDEA自动忽略了其中某一个文件，我们平时写代码查代码习惯直接看IDEA不看硬盘文件，回头看电脑硬盘文件目录就会发现其实真的是两份文件，一份大写一份小写其实归根结底还是，.git文件提交记录未更新到最新状态，这跟清理远程已删除分支道理是一样的解决方案：简单，手动删除一份您不需要的，提交到git就行了 git拉取报错还是大小写导致的问题，您把原来大写的文件重新命名为小写，之后提交git，个别同事的电脑拉取代码会出现拉取不下来的情况，提示某某文件未跟踪原因：您同事的电脑本地.git文件记录的是您原来提交到git服务器大写的文件，拉取时git检测不到它原先跟踪的文件，因此报错解决方案：打开.gitignore文件，把报错的文件目录粘贴进去，再次拉去代码，没问题了吧。拉取好之后提交您变更的代码，之后就可以把刚才粘贴进去的文件目录去掉了，机智如我]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用Hexo搭建自己的博客]]></title>
      <url>%2F2017%2F03%2F12%2F%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[前期准备本次搭建在window 10系统之上，如果您是Mac系统，可能不适用开始之前，您必须做好以下准备工作 拥有一个github账号，没有的话去注册一个，知道git与github大概是干什么用的 了解nodejs是什么玩意，不知道请自行百度 浏览一下Hexo官网 有空可以看一下NexT主题，等不及的直接跳过 然后浏览一下使用Hexo会用到的几个命令，没错，就几个而已 hexo cl = hexo clear //新建文章 hexo g = hexo generate //把文章生产静态网页 hexo s = hexo server //启动本地调试环境 hexo d = hexo deploy //部署到github hexo d -g //生成静态网页并部署到github，相当于执行了hexo g和hexo d两步 环境搭建安装node 到nodejs官网下载最新版本的nodejs安装包，一路安装就OK 安装成功之后，查看node版本号 C:\Users\lenovo&gt;node -v v6.10.0 安装git 可以参考git教程——廖雪峰的官方网站 安装成功之后，查看git版本号 C:\Users\lenovo&gt;git --version git version 1.9.5.msysgit.1 在github上创建一个项目项目必须命名为 github用户名.github.io，比如我的就是 lin1220.github.io（要借助github托管必须这么命名，怪我咯） 安装hexoC:\Users\lenovo&gt;npm install -g hexo 安装成功之后，查看hexo版本号 C:\Users\lenovo&gt;hexo -v hexo-cli: 1.0.2 os: Windows_NT 10.0.14393 win32 x64 http_parser: 2.7.0 node: 6.10.0 v8: 5.1.281.93 uv: 1.9.1 zlib: 1.2.8 ares: 1.10.1-DEV icu: 58.2 modules: 48 openssl: 1.0.2k github配置 git是版本管理工具，本次搭建要把博客放在github上托管，如果您是git老用户，直接跳过本步骤；如果是刚刚安装git的新用户，您需要为git提交进行全局配置一些参数，以便使用git来提交博客（或者是代码）到github上，配置如下： git config --global user.email xxx@qq.com git config --global user.name xxx ssh-keygen -t rsa -C xxx@163.com(邮箱地址) // 生成ssh 找到.ssh文件夹打开，使用cat id_rsa.pub //打开公钥ssh串 登陆github，settings －&gt; SSH keys －&gt; add ssh keys（把上面的内容全部添加进去即可） 本步骤不明白请自行百度好了，可以进行hexo博客搭建了 搭建Hexo初始化在某个地方新建一个文件夹（比如blog），然后进入blog目录，以下所有操作都是在该目录下执行 D:\Exploit\blog&gt;hexo init INFO Cloning hexo-starter to D:\Exploit\blog Cloning into &apos;D:\Exploit\blog&apos;... remote: Counting objects: 53, done. remote: Total 53 (delta 0), reused 0 (delta 0), pack-reused 53 Unpacking objects: 100% (53/53), done. **************** npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^1.0.0 (node_modules\chokidar\node_modules\fsevents): npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.1: wanted {&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;} (current: {&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;}) INFO Start blogging with Hexo! 当你看到”INFO Start blogging with Hexo!”时，表示初始化完成，我们查看一下blog文件夹的目录结构 D:\Exploit\blog&gt;ls _config.yml node_modules package.json scaffolds source themes _config.yml：整个博客网站的配置文件node_modules：node模块（比如：hexo-deployer-git，等一下部署到git需要用到该模块）source：存放资源文章，您所写的文章都会保存在这里themes：存放主题 生成静态页面初始化完成之后，source文件夹下面已经有一篇默认的文章，相当于demo D:\Exploit\blog&gt;cd source/_posts D:\Exploit\blog\source\_posts&gt;ls hello-world.md 接下来将hello-world.md（.md表示该文件为markdown文件）变成静态页面 D:\Exploit\blog&gt;hexo g INFO Start processing INFO Files loaded in 252 ms INFO Generated: index.html INFO Generated: archives/index.html INFO Generated: fancybox/blank.gif INFO Generated: fancybox/jquery.fancybox.css INFO Generated: fancybox/jquery.fancybox.pack.js INFO Generated: fancybox/jquery.fancybox.js INFO Generated: fancybox/fancybox_loading@2x.gif INFO Generated: fancybox/fancybox_loading.gif INFO Generated: fancybox/fancybox_sprite@2x.png INFO Generated: fancybox/fancybox_overlay.png INFO Generated: fancybox/fancybox_sprite.png INFO Generated: archives/2017/03/index.html INFO Generated: archives/2017/index.html INFO Generated: css/fonts/fontawesome-webfont.eot INFO Generated: js/script.js INFO Generated: fancybox/helpers/jquery.fancybox-buttons.css INFO Generated: fancybox/helpers/jquery.fancybox-buttons.js INFO Generated: fancybox/helpers/jquery.fancybox-thumbs.css INFO Generated: fancybox/helpers/jquery.fancybox-media.js INFO Generated: fancybox/helpers/jquery.fancybox-thumbs.js INFO Generated: css/fonts/fontawesome-webfont.woff INFO Generated: css/style.css INFO Generated: fancybox/helpers/fancybox_buttons.png INFO Generated: css/fonts/FontAwesome.otf INFO Generated: css/fonts/fontawesome-webfont.ttf INFO Generated: 2017/03/12/hello-world/index.html INFO Generated: css/fonts/fontawesome-webfont.svg INFO Generated: css/images/banner.jpg INFO 28 files generated in 971 ms 启动本地调试接下来启动本地调试，在浏览器中预览页面效果 D:\Exploit\blog&gt;hexo s INFO Start processing INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 更换主题如果您觉得hexo默认的主题（landscape）已经满足您的要求，请跳过本步骤 D:\Exploit\blog&gt;cd themes D:\Exploit\blog\themes&gt;ls landscape 全球最大的无性别交友网站github为我们提供了大量的主题，让您尽情挑选下面贴出一些github上start挺高的主题iissnan/hexo-theme-nextlitten/hexo-theme-yiliaTryGhost/Casperwuchong/jacmanA-limon/pacman我使用的是人气最高的NexT主题（阿里中间件团队博客用的也是这个） 从github上clone主题D:\Exploit\blog&gt;git clone https://github.com/iissnan/hexo-theme-next themes/next 修改配置文件中的默认主题 打开blog/_config.yml文件，修改theme配置项 theme: next //默认是landscape //注意“theme:”之后有一个英文的空格，该配置文件是YAML文件，这么写是YAML规定的语法 接下来再修改其他一些必要的配置项，更加具体的配置项说明请移步Hexo文档查看 # Site title: lin_1220 //网站标题 subtitle: 记录生活点滴 //网站副标题 description: //网站描述 author: lin_1220 //作者 language: zh-Hans //语言，zh-Hans是中文简体 timezone: //时区 部署到github上现在将博客部署到github上 部署之前先修改bolg下面的_config.ymldeploy: type: git repo: https://github.com/lin1220/lin1220.github.io.git //将lin1220替换成自己的用户名 branch: master 备注：在hexo3.x版本下，type应该是git，不是github；另外冒号后面都有一个英文的空格，不然会报错的 部署D:\Exploit\blog&gt;hexo d ***************************************** Username for &apos;https://github.com&apos;: lin1220 Password for &apos;https://lin1220@github.com&apos;: Branch master set up to track remote branch master from https://github.com/lin1220/lin1220.github.io.git. To https://github.com/lin1220/lin1220.github.io.git 7e9e203..ba40618 HEAD -&gt; master INFO Deploy done: git 备注：如果执行上述命令报错，执行下面命令 npm install hexo-deployer-git –save部署成功之后，访问https://lin1220.github.io看到跟本地预览时一样的效果]]></content>
    </entry>

    
  
  
</search>
